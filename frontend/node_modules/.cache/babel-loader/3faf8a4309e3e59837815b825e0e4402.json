{"ast":null,"code":"var _jsxFileName = \"/Users/razefron/Desktop/projects/top_ten/frontend/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport configureStore from \"..//store/store\";\nimport jwt_decode from \"jwt-decode\"; // The session utility we just created\n\nimport { setAuthToken } from \"./util/session_api_util\"; // We have not created this action yet, but will do so in the next step\n\nimport { logout } from \"../actions/session_actions\"; // We will create this component shortly\n\nimport Root from \"../components/root\";\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let store; // If a returning user has a session token stored in localStorage\n\n  if (localStorage.jwtToken) {\n    // Set the token as a common header for all axios requests\n    setAuthToken(localStorage.jwtToken); // Decode the token to obtain the user's information\n\n    const decodedUser = jwt_decode(localStorage.jwtToken); // Create a preconfigured state we can immediately add to our store\n\n    const preloadedState = {\n      session: {\n        isAuthenticated: true,\n        user: decodedUser\n      }\n    };\n    store = configureStore(preloadedState);\n    const currentTime = Date.now() / 1000; // If the user's token has expired\n\n    if (decodedUser.exp < currentTime) {\n      // Logout the user and redirect to the login page\n      store.dispatch(logout());\n      window.location.href = \"/login\";\n    }\n  } else {\n    // If this is a first time user, start with an empty store\n    store = configureStore({});\n  } // Render our root component and pass in the store as a prop\n\n\n  const root = document.getElementById(\"root\");\n  ReactDOM.render( /*#__PURE__*/React.createElement(Root, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 19\n    }\n  }), root);\n});","map":{"version":3,"sources":["/Users/razefron/Desktop/projects/top_ten/frontend/src/index.js"],"names":["React","ReactDOM","configureStore","jwt_decode","setAuthToken","logout","Root","document","addEventListener","store","localStorage","jwtToken","decodedUser","preloadedState","session","isAuthenticated","user","currentTime","Date","now","exp","dispatch","window","location","href","root","getElementById","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,SAASC,YAAT,QAA6B,yBAA7B,C,CACA;;AACA,SAASC,MAAT,QAAuB,4BAAvB,C,CACA;;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AAEAC,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8C,MAAM;AAClD,MAAIC,KAAJ,CADkD,CAGlD;;AACA,MAAIC,YAAY,CAACC,QAAjB,EAA2B;AACzB;AACAP,IAAAA,YAAY,CAACM,YAAY,CAACC,QAAd,CAAZ,CAFyB,CAIzB;;AACA,UAAMC,WAAW,GAAGT,UAAU,CAACO,YAAY,CAACC,QAAd,CAA9B,CALyB,CAOzB;;AACA,UAAME,cAAc,GAAG;AACrBC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,eAAe,EAAE,IAAnB;AAAyBC,QAAAA,IAAI,EAAEJ;AAA/B;AADY,KAAvB;AAIAH,IAAAA,KAAK,GAAGP,cAAc,CAACW,cAAD,CAAtB;AAEA,UAAMI,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAjC,CAdyB,CAgBzB;;AACA,QAAIP,WAAW,CAACQ,GAAZ,GAAkBH,WAAtB,EAAmC;AACjC;AACAR,MAAAA,KAAK,CAACY,QAAN,CAAehB,MAAM,EAArB;AACAiB,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACD;AACF,GAtBD,MAsBO;AACL;AACAf,IAAAA,KAAK,GAAGP,cAAc,CAAC,EAAD,CAAtB;AACD,GA7BiD,CA8BlD;;;AACA,QAAMuB,IAAI,GAAGlB,QAAQ,CAACmB,cAAT,CAAwB,MAAxB,CAAb;AAEAzB,EAAAA,QAAQ,CAAC0B,MAAT,eAAgB,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAElB,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhB,EAAwCgB,IAAxC;AACD,CAlCD","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport configureStore from \"..//store/store\";\nimport jwt_decode from \"jwt-decode\";\n\n// The session utility we just created\nimport { setAuthToken } from \"./util/session_api_util\";\n// We have not created this action yet, but will do so in the next step\nimport { logout } from \"../actions/session_actions\";\n// We will create this component shortly\nimport Root from \"../components/root\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let store;\n\n  // If a returning user has a session token stored in localStorage\n  if (localStorage.jwtToken) {\n    // Set the token as a common header for all axios requests\n    setAuthToken(localStorage.jwtToken);\n\n    // Decode the token to obtain the user's information\n    const decodedUser = jwt_decode(localStorage.jwtToken);\n\n    // Create a preconfigured state we can immediately add to our store\n    const preloadedState = {\n      session: { isAuthenticated: true, user: decodedUser },\n    };\n\n    store = configureStore(preloadedState);\n\n    const currentTime = Date.now() / 1000;\n\n    // If the user's token has expired\n    if (decodedUser.exp < currentTime) {\n      // Logout the user and redirect to the login page\n      store.dispatch(logout());\n      window.location.href = \"/login\";\n    }\n  } else {\n    // If this is a first time user, start with an empty store\n    store = configureStore({});\n  }\n  // Render our root component and pass in the store as a prop\n  const root = document.getElementById(\"root\");\n\n  ReactDOM.render(<Root store={store} />, root);\n});\n"]},"metadata":{},"sourceType":"module"}