{"ast":null,"code":"import * as APIUtil from \"../util/session_api_util\";\nimport jwt_decode from \"jwt-decode\";\nexport const RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\nexport const RECEIVE_SESSION_ERRORS = \"RECEIVE_SESSION_ERRORS\";\nexport const RECEIVE_USER_LOGOUT = \"RECEIVE_USER_LOGOUT\";\nexport const RECEIVE_USER_SIGN_IN = \"RECEIVE_USER_SIGN_IN\"; // We'll dispatch this when our user signs in\n\nexport const receiveCurrentUser = currentUser => ({\n  type: RECEIVE_CURRENT_USER,\n  currentUser\n}); // This will be used to redirect the user to the login page upon signup\n\nexport const receiveUserSignIn = () => ({\n  type: RECEIVE_USER_SIGN_IN\n}); // We dispatch this one to show authentication errors on the frontend\n\nexport const receiveErrors = errors => ({\n  type: RECEIVE_SESSION_ERRORS,\n  errors\n}); // When our user is logged out, we will dispatch this action to set isAuthenticated to false\n\nexport const logoutUser = () => ({\n  type: RECEIVE_USER_LOGOUT\n}); // Upon signup, dispatch the approporiate action depending on which type of response we receieve from the backend\n\nexport const signup = user => dispatch => APIUtil.signup(user).then(() => dispatch(receiveUserSignIn()), err => dispatch(receiveErrors(err.response.data))); // Upon login, set the session token and dispatch the current user. Dispatch errors on failure.\n\nexport const login = user => dispatch => APIUtil.login(user).then(res => {\n  const {\n    token\n  } = res.data;\n  localStorage.setItem(\"jwtToken\", token);\n  APIUtil.setAuthToken(token);\n  const decoded = jwt_decode(token);\n  dispatch(receiveCurrentUser(decoded));\n}).catch(err => {\n  dispatch(receiveErrors(err.response.data));\n}); // We wrote this one earlier\n\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  APIUtil.setAuthToken(false);\n  dispatch(logoutUser());\n};","map":{"version":3,"sources":["/Users/razefron/Desktop/projects/top_ten/frontend/src/actions/session_actions.js"],"names":["APIUtil","jwt_decode","RECEIVE_CURRENT_USER","RECEIVE_SESSION_ERRORS","RECEIVE_USER_LOGOUT","RECEIVE_USER_SIGN_IN","receiveCurrentUser","currentUser","type","receiveUserSignIn","receiveErrors","errors","logoutUser","signup","user","dispatch","then","err","response","data","login","res","token","localStorage","setItem","setAuthToken","decoded","catch","logout","removeItem"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,0BAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B,C,CAEP;;AACA,OAAO,MAAMC,kBAAkB,GAAIC,WAAD,KAAkB;AAClDC,EAAAA,IAAI,EAAEN,oBAD4C;AAElDK,EAAAA;AAFkD,CAAlB,CAA3B,C,CAKP;;AACA,OAAO,MAAME,iBAAiB,GAAG,OAAO;AACtCD,EAAAA,IAAI,EAAEH;AADgC,CAAP,CAA1B,C,CAIP;;AACA,OAAO,MAAMK,aAAa,GAAIC,MAAD,KAAa;AACxCH,EAAAA,IAAI,EAAEL,sBADkC;AAExCQ,EAAAA;AAFwC,CAAb,CAAtB,C,CAKP;;AACA,OAAO,MAAMC,UAAU,GAAG,OAAO;AAC/BJ,EAAAA,IAAI,EAAEJ;AADyB,CAAP,CAAnB,C,CAIP;;AACA,OAAO,MAAMS,MAAM,GAAIC,IAAD,IAAWC,QAAD,IAC9Bf,OAAO,CAACa,MAAR,CAAeC,IAAf,EAAqBE,IAArB,CACE,MAAMD,QAAQ,CAACN,iBAAiB,EAAlB,CADhB,EAEGQ,GAAD,IAASF,QAAQ,CAACL,aAAa,CAACO,GAAG,CAACC,QAAJ,CAAaC,IAAd,CAAd,CAFnB,CADK,C,CAMP;;AACA,OAAO,MAAMC,KAAK,GAAIN,IAAD,IAAWC,QAAD,IAC7Bf,OAAO,CAACoB,KAAR,CAAcN,IAAd,EACGE,IADH,CACSK,GAAD,IAAS;AACb,QAAM;AAAEC,IAAAA;AAAF,MAAYD,GAAG,CAACF,IAAtB;AACAI,EAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACAtB,EAAAA,OAAO,CAACyB,YAAR,CAAqBH,KAArB;AACA,QAAMI,OAAO,GAAGzB,UAAU,CAACqB,KAAD,CAA1B;AACAP,EAAAA,QAAQ,CAACT,kBAAkB,CAACoB,OAAD,CAAnB,CAAR;AACD,CAPH,EAQGC,KARH,CAQUV,GAAD,IAAS;AACdF,EAAAA,QAAQ,CAACL,aAAa,CAACO,GAAG,CAACC,QAAJ,CAAaC,IAAd,CAAd,CAAR;AACD,CAVH,CADK,C,CAaP;;AACA,OAAO,MAAMS,MAAM,GAAG,MAAOb,QAAD,IAAc;AACxCQ,EAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACA7B,EAAAA,OAAO,CAACyB,YAAR,CAAqB,KAArB;AACAV,EAAAA,QAAQ,CAACH,UAAU,EAAX,CAAR;AACD,CAJM","sourcesContent":["import * as APIUtil from \"../util/session_api_util\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\nexport const RECEIVE_SESSION_ERRORS = \"RECEIVE_SESSION_ERRORS\";\nexport const RECEIVE_USER_LOGOUT = \"RECEIVE_USER_LOGOUT\";\nexport const RECEIVE_USER_SIGN_IN = \"RECEIVE_USER_SIGN_IN\";\n\n// We'll dispatch this when our user signs in\nexport const receiveCurrentUser = (currentUser) => ({\n  type: RECEIVE_CURRENT_USER,\n  currentUser,\n});\n\n// This will be used to redirect the user to the login page upon signup\nexport const receiveUserSignIn = () => ({\n  type: RECEIVE_USER_SIGN_IN,\n});\n\n// We dispatch this one to show authentication errors on the frontend\nexport const receiveErrors = (errors) => ({\n  type: RECEIVE_SESSION_ERRORS,\n  errors,\n});\n\n// When our user is logged out, we will dispatch this action to set isAuthenticated to false\nexport const logoutUser = () => ({\n  type: RECEIVE_USER_LOGOUT,\n});\n\n// Upon signup, dispatch the approporiate action depending on which type of response we receieve from the backend\nexport const signup = (user) => (dispatch) =>\n  APIUtil.signup(user).then(\n    () => dispatch(receiveUserSignIn()),\n    (err) => dispatch(receiveErrors(err.response.data))\n  );\n\n// Upon login, set the session token and dispatch the current user. Dispatch errors on failure.\nexport const login = (user) => (dispatch) =>\n  APIUtil.login(user)\n    .then((res) => {\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      APIUtil.setAuthToken(token);\n      const decoded = jwt_decode(token);\n      dispatch(receiveCurrentUser(decoded));\n    })\n    .catch((err) => {\n      dispatch(receiveErrors(err.response.data));\n    });\n\n// We wrote this one earlier\nexport const logout = () => (dispatch) => {\n  localStorage.removeItem(\"jwtToken\");\n  APIUtil.setAuthToken(false);\n  dispatch(logoutUser());\n};\n"]},"metadata":{},"sourceType":"module"}